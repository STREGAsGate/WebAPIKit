diff --git a/Sources/CSSOM/Generated.swift b/Sources/CSSOM/Generated.swift
index b22e2a9..814ae93 100644
--- a/Sources/CSSOM/Generated.swift
+++ b/Sources/CSSOM/Generated.swift
@@ -361,8 +361,14 @@ public class CSSColor: CSSColorValue {
         self.init(unsafelyWrapping: Self.constructor!.new(arguments: [_toJSValue(colorSpace), _toJSValue(channels), _toJSValue(alpha)]))
     }
 
+    @available(*, unavailable)
+    override public var colorSpace: CSSKeywordValue {
+        get { colorSpaceOrString.cssKeywordValue! }
+        set { colorSpaceOrString = .cssKeywordValue(newValue) }
+    }
+
     @usableFromInline let _colorSpace: ReadWriteAttribute<CSSKeywordish>
-    @inlinable override public var colorSpace: CSSKeywordish {
+    @inlinable public var colorSpaceOrString: CSSKeywordish {
         get { _colorSpace.wrappedValue }
         set { _colorSpace.wrappedValue = newValue }
     }
@@ -390,7 +396,8 @@ public class CSSColorValue: CSSStyleValue {
         return this[Strings.to].function!(this: this, arguments: [_toJSValue(colorSpace)]).fromJSValue()!
     }
 
-    @inlinable override public class func parse(cssText: String) -> CSSColorValue_or_CSSStyleValue {
+    // returns CSSStyleValue | CSSColorValue
+    @inlinable public class func parse(cssText: String) -> CSSStyleValue {
         let this = constructor!
         return this[Strings.parse].function!(this: this, arguments: [_toJSValue(cssText)]).fromJSValue()!
     }
@@ -947,7 +954,7 @@ public class CSSNumericValue: CSSStyleValue {
         return this[Strings.type].function!(this: this, arguments: []).fromJSValue()!
     }
 
-    @inlinable override public class func parse(cssText: String) -> Self {
+    @inlinable public class func parse(cssText: String) -> Self {
         let this = constructor!
         return this[Strings.parse].function!(this: this, arguments: [_toJSValue(cssText)]).fromJSValue()!
     }
