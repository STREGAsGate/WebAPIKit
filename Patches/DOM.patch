--- a/Sources/DOM/Generated.swift
+++ b/Sources/DOM/Generated.swift
@@ -1006,8 +1006,15 @@ public class BeforeUnloadEvent: Event {
         super.init(unsafelyWrapping: jsObject)
     }

+    @available(*, unavailable)
+    override public var returnValue: Bool {
+        get { !_returnValue.wrappedValue.isEmpty }
+        set {}
+    }
+
     @usableFromInline let _returnValue: ReadWriteAttribute<String>
-    @inlinable override public var returnValue: String {
+    // renamed because `String` is not compatible with `Bool`
+    @inlinable public var returnValueAsString: String {
         get { _returnValue.wrappedValue }
         set { _returnValue.wrappedValue = newValue }
     }
@@ -7070,7 +7077,8 @@ public class HTMLFormControlsCollection: HTMLCollection {
         jsObject[key].fromJSValue()
     }

-    @inlinable override public func namedItem(name: String) -> Element_or_RadioNodeList? {
+    // `override` removed since the superclass returns a more constrained type `Element`
+    @inlinable func namedItem(name: String) -> Element_or_RadioNodeList? {
         let this = jsObject
         return this[Strings.namedItem].function!(this: this, arguments: [_toJSValue(name)]).fromJSValue()
     }
@@ -20369,19 +20377,9 @@ public enum CanvasImageSource: JSValueCompatible, Any_CanvasImageSource {
         self = val
     }

-    init(_ htmlOrSVGImageElement: HTMLOrSVGImageElement) {
-        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlOrSVGImageElement)
-        self = val
-    }
-
     init(_ htmlImageElement: HTMLImageElement) {
-        let val: HTMLOrSVGImageElement = .htmlImageElement(htmlImageElement)
-        self = .init(val)
-    }
-
-    init(_ svgImageElement: SVGImageElement) {
-        let val: HTMLOrSVGImageElement = .svgImageElement(svgImageElement)
-        self = .init(val)
+        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlImageElement)
+        self = val
     }

     init(_ htmlVideoElement: HTMLVideoElement) {
@@ -21629,18 +21627,8 @@ public enum ImageBitmapSource: JSValueCompatible, Any_ImageBitmapSource {
         self = .init(val)
     }

-    init(_ htmlOrSVGImageElement: HTMLOrSVGImageElement) {
-        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlOrSVGImageElement)
-        self = .init(val)
-    }
-
     init(_ htmlImageElement: HTMLImageElement) {
-        let val: HTMLOrSVGImageElement = .htmlImageElement(htmlImageElement)
-        self = .init(val)
-    }
-
-    init(_ svgImageElement: SVGImageElement) {
-        let val: HTMLOrSVGImageElement = .svgImageElement(svgImageElement)
+        let val: CanvasImageSource = .htmlOrSVGImageElement(htmlImageElement)
         self = .init(val)
     }

