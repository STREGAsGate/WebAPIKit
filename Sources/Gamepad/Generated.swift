// This file was auto-generated by WebIDLToSwift. DO NOT EDIT!

import DOM
import ECMAScript
import JavaScriptKit
import WebAPIBase

public class Gamepad: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Gamepad].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _id = ReadonlyAttribute(jsObject: jsObject, name: Strings.id)
        _index = ReadonlyAttribute(jsObject: jsObject, name: Strings.index)
        _connected = ReadonlyAttribute(jsObject: jsObject, name: Strings.connected)
        _timestamp = ReadonlyAttribute(jsObject: jsObject, name: Strings.timestamp)
        _mapping = ReadonlyAttribute(jsObject: jsObject, name: Strings.mapping)
        _axes = ReadonlyAttribute(jsObject: jsObject, name: Strings.axes)
        _buttons = ReadonlyAttribute(jsObject: jsObject, name: Strings.buttons)
        _hand = ReadonlyAttribute(jsObject: jsObject, name: Strings.hand)
        _hapticActuators = ReadonlyAttribute(jsObject: jsObject, name: Strings.hapticActuators)
        _pose = ReadonlyAttribute(jsObject: jsObject, name: Strings.pose)
        _touchEvents = ReadonlyAttribute(jsObject: jsObject, name: Strings.touchEvents)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var id: String

    @ReadonlyAttribute
    public var index: Int32

    @ReadonlyAttribute
    public var connected: Bool

    @ReadonlyAttribute
    public var timestamp: DOMHighResTimeStamp

    @ReadonlyAttribute
    public var mapping: GamepadMappingType

    @ReadonlyAttribute
    public var axes: [Double]

    @ReadonlyAttribute
    public var buttons: [GamepadButton]

    @ReadonlyAttribute
    public var hand: GamepadHand

    @ReadonlyAttribute
    public var hapticActuators: [GamepadHapticActuator]

    @ReadonlyAttribute
    public var pose: GamepadPose?

    @ReadonlyAttribute
    public var touchEvents: [GamepadTouch]?
}

public class GamepadButton: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.GamepadButton].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _pressed = ReadonlyAttribute(jsObject: jsObject, name: Strings.pressed)
        _touched = ReadonlyAttribute(jsObject: jsObject, name: Strings.touched)
        _value = ReadonlyAttribute(jsObject: jsObject, name: Strings.value)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var pressed: Bool

    @ReadonlyAttribute
    public var touched: Bool

    @ReadonlyAttribute
    public var value: Double
}

public class GamepadEvent: Event {
    @inlinable override public class var constructor: JSFunction? { JSObject.global[Strings.GamepadEvent].function }

    public required init(unsafelyWrapping jsObject: JSObject) {
        _gamepad = ReadonlyAttribute(jsObject: jsObject, name: Strings.gamepad)
        super.init(unsafelyWrapping: jsObject)
    }

    @inlinable public convenience init(type: String, eventInitDict: GamepadEventInit) {
        self.init(unsafelyWrapping: Self.constructor!.new(arguments: [type.jsValue, eventInitDict.jsValue]))
    }

    @ReadonlyAttribute
    public var gamepad: Gamepad
}

public class GamepadEventInit: BridgedDictionary {
    public convenience init(gamepad: Gamepad) {
        let object = JSObject.global[Strings.Object].function!.new()
        object[Strings.gamepad] = gamepad.jsValue
        self.init(unsafelyWrapping: object)
    }

    public required init(unsafelyWrapping object: JSObject) {
        _gamepad = ReadWriteAttribute(jsObject: object, name: Strings.gamepad)
        super.init(unsafelyWrapping: object)
    }

    @ReadWriteAttribute
    public var gamepad: Gamepad
}

public enum GamepadHand: JSString, JSValueCompatible {
    case _empty = ""
    case left = "left"
    case right = "right"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class GamepadHapticActuator: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.GamepadHapticActuator].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _type = ReadonlyAttribute(jsObject: jsObject, name: Strings.type)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var type: GamepadHapticActuatorType

    @inlinable public func pulse(value: Double, duration: Double) -> JSPromise {
        let this = jsObject
        return this[Strings.pulse].function!(this: this, arguments: [value.jsValue, duration.jsValue]).fromJSValue()!
    }

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    @inlinable public func pulse(value: Double, duration: Double) async throws -> Bool {
        let this = jsObject
        let _promise: JSPromise = this[Strings.pulse].function!(this: this, arguments: [value.jsValue, duration.jsValue]).fromJSValue()!
        return try await _promise.value.fromJSValue()!
    }
}

public enum GamepadHapticActuatorType: JSString, JSValueCompatible {
    case vibration = "vibration"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public enum GamepadMappingType: JSString, JSValueCompatible {
    case _empty = ""
    case standard = "standard"
    case xrStandard = "xr-standard"

    @inlinable public static func construct(from jsValue: JSValue) -> Self? {
        if let string = jsValue.jsString {
            return Self(rawValue: string)
        }
        return nil
    }

    @inlinable public init?(string: String) {
        self.init(rawValue: JSString(string))
    }

    @inlinable public var jsValue: JSValue { rawValue.jsValue }
}

public class GamepadPose: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.GamepadPose].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _hasOrientation = ReadonlyAttribute(jsObject: jsObject, name: Strings.hasOrientation)
        _hasPosition = ReadonlyAttribute(jsObject: jsObject, name: Strings.hasPosition)
        _position = ReadonlyAttribute(jsObject: jsObject, name: Strings.position)
        _linearVelocity = ReadonlyAttribute(jsObject: jsObject, name: Strings.linearVelocity)
        _linearAcceleration = ReadonlyAttribute(jsObject: jsObject, name: Strings.linearAcceleration)
        _orientation = ReadonlyAttribute(jsObject: jsObject, name: Strings.orientation)
        _angularVelocity = ReadonlyAttribute(jsObject: jsObject, name: Strings.angularVelocity)
        _angularAcceleration = ReadonlyAttribute(jsObject: jsObject, name: Strings.angularAcceleration)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var hasOrientation: Bool

    @ReadonlyAttribute
    public var hasPosition: Bool

    @ReadonlyAttribute
    public var position: Float32Array?

    @ReadonlyAttribute
    public var linearVelocity: Float32Array?

    @ReadonlyAttribute
    public var linearAcceleration: Float32Array?

    @ReadonlyAttribute
    public var orientation: Float32Array?

    @ReadonlyAttribute
    public var angularVelocity: Float32Array?

    @ReadonlyAttribute
    public var angularAcceleration: Float32Array?
}

public class GamepadTouch: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.GamepadTouch].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        _touchId = ReadonlyAttribute(jsObject: jsObject, name: Strings.touchId)
        _surfaceId = ReadonlyAttribute(jsObject: jsObject, name: Strings.surfaceId)
        _position = ReadonlyAttribute(jsObject: jsObject, name: Strings.position)
        _surfaceDimensions = ReadonlyAttribute(jsObject: jsObject, name: Strings.surfaceDimensions)
        self.jsObject = jsObject
    }

    @ReadonlyAttribute
    public var touchId: UInt32

    @ReadonlyAttribute
    public var surfaceId: UInt8

    @ReadonlyAttribute
    public var position: Float32Array

    @ReadonlyAttribute
    public var surfaceDimensions: Uint32Array?
}

public class Navigator: JSBridgedClass {
    @inlinable public class var constructor: JSFunction? { JSObject.global[Strings.Navigator].function }

    public let jsObject: JSObject

    public required init(unsafelyWrapping jsObject: JSObject) {
        self.jsObject = jsObject
    }

    @inlinable public func getGamepads() -> [Gamepad?] {
        let this = jsObject
        return this[Strings.getGamepads].function!(this: this, arguments: []).fromJSValue()!
    }
}

public protocol WindowEventHandlers: JSBridgedClass {}
public extension WindowEventHandlers {
    @inlinable var ongamepadconnected: EventHandler {
        get { ClosureAttribute1Optional[Strings.ongamepadconnected, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ongamepadconnected, in: jsObject] = newValue }
    }

    @inlinable var ongamepaddisconnected: EventHandler {
        get { ClosureAttribute1Optional[Strings.ongamepaddisconnected, in: jsObject] }
        nonmutating set { ClosureAttribute1Optional[Strings.ongamepaddisconnected, in: jsObject] = newValue }
    }
}

@usableFromInline enum Strings {
    static let _self: JSString = "self"
    @usableFromInline static let Gamepad: JSString = "Gamepad"
    @usableFromInline static let GamepadButton: JSString = "GamepadButton"
    @usableFromInline static let GamepadEvent: JSString = "GamepadEvent"
    @usableFromInline static let GamepadHapticActuator: JSString = "GamepadHapticActuator"
    @usableFromInline static let GamepadPose: JSString = "GamepadPose"
    @usableFromInline static let GamepadTouch: JSString = "GamepadTouch"
    @usableFromInline static let Navigator: JSString = "Navigator"
    @usableFromInline static let Object: JSString = "Object"
    @usableFromInline static let angularAcceleration: JSString = "angularAcceleration"
    @usableFromInline static let angularVelocity: JSString = "angularVelocity"
    @usableFromInline static let axes: JSString = "axes"
    @usableFromInline static let buttons: JSString = "buttons"
    @usableFromInline static let connected: JSString = "connected"
    @usableFromInline static let gamepad: JSString = "gamepad"
    @usableFromInline static let getGamepads: JSString = "getGamepads"
    @usableFromInline static let hand: JSString = "hand"
    @usableFromInline static let hapticActuators: JSString = "hapticActuators"
    @usableFromInline static let hasOrientation: JSString = "hasOrientation"
    @usableFromInline static let hasPosition: JSString = "hasPosition"
    @usableFromInline static let id: JSString = "id"
    @usableFromInline static let index: JSString = "index"
    @usableFromInline static let linearAcceleration: JSString = "linearAcceleration"
    @usableFromInline static let linearVelocity: JSString = "linearVelocity"
    @usableFromInline static let mapping: JSString = "mapping"
    @usableFromInline static let ongamepadconnected: JSString = "ongamepadconnected"
    @usableFromInline static let ongamepaddisconnected: JSString = "ongamepaddisconnected"
    @usableFromInline static let orientation: JSString = "orientation"
    @usableFromInline static let pose: JSString = "pose"
    @usableFromInline static let position: JSString = "position"
    @usableFromInline static let pressed: JSString = "pressed"
    @usableFromInline static let pulse: JSString = "pulse"
    @usableFromInline static let surfaceDimensions: JSString = "surfaceDimensions"
    @usableFromInline static let surfaceId: JSString = "surfaceId"
    @usableFromInline static let timestamp: JSString = "timestamp"
    @usableFromInline static let toString: JSString = "toString"
    @usableFromInline static let touchEvents: JSString = "touchEvents"
    @usableFromInline static let touchId: JSString = "touchId"
    @usableFromInline static let touched: JSString = "touched"
    @usableFromInline static let type: JSString = "type"
    @usableFromInline static let value: JSString = "value"
}
